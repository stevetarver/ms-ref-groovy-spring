{
	"info": {
		"_postman_id": "a1b1159e-642e-4e40-9b4f-099dc1dd0ccd",
		"name": "ms-ref-groovy-spring regression test",
		"description": "Provides protection against historical flaws.\n\nNOTES:\n* Requires selecting an environment appropriate for the target\n* Requires a fresh mongo-sample-data container",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. readiness",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c0cb2a64-a4ce-45a1-86ff-1981d5b03ebf",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 80ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(80);",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "670c979e-3477-4ba8-bef2-525d26de10e3",
						"type": "text/javascript",
						"exec": [
							"console.log('Verifying service is ready');",
							"",
							"// Get the URL for this step - allows us to copy/paste this code into any step",
							"var url = request['url'].replace('{{host}}', postman.getEnvironmentVariable('host'));",
							"var retryDelay = 10000;",
							"var retryLimit = 8;",
							"",
							"function isServiceReady(retryCount) {",
							"    pm.sendRequest(url, function (err, response) {",
							"        // Service endpoint is not up yet - any kind of connection error",
							"        var notUp = (null !== err);",
							"        // Service is up, but still initializing or waiting on upstream partners",
							"        // NOTE: there is always a response object, but .code only exists if we connected",
							"        var notReady = (!response.hasOwnProperty('code') || response.code !== 200);",
							"",
							"        if(notUp || notReady) {",
							"            if (retryCount < retryLimit) {",
							"                if(notUp) {",
							"                    console.log('Service is down. Retrying in ' + retryDelay + 'ms');",
							"                } else {",
							"                    console.log('Service is not yet ready. Retrying in ' + retryDelay + 'ms');",
							"                }",
							"                // If not ready, retry this function after retryDelay",
							"                setTimeout(function() {",
							"                    isServiceReady(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log('Retry limit reached, giving up.');",
							"                postman.setNextRequest(null);",
							"            }",
							"        }",
							"    });",
							"}",
							"",
							"isServiceReady(1);",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}/healthz/readiness",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"healthz",
						"readiness"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. liveness",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5a673b21-6fa5-4f27-96f2-d5246868082e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 80ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(80);",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a1145231-c5f6-4a28-b637-d5f92975023b",
						"type": "text/javascript",
						"exec": [
							"console.log('Verifying service is ready');",
							"",
							"// Get the URL for this step - allows us to copy/paste this code into any step",
							"var url = request['url'].replace('{{host}}', postman.getEnvironmentVariable('host'));",
							"var retryDelay = 10000;",
							"var retryLimit = 8;",
							"",
							"function isServiceReady(retryCount) {",
							"    pm.sendRequest(url, function (err, response) {",
							"        // Service endpoint is not up yet - any kind of connection error",
							"        var notUp = (null !== err);",
							"        // Service is up, but still initializing or waiting on upstream partners",
							"        // NOTE: there is always a response object, but .code only exists if we connected",
							"        var notReady = (!response.hasOwnProperty('code') || response.code !== 200);",
							"",
							"        if(notUp || notReady) {",
							"            if (retryCount < retryLimit) {",
							"                if(notUp) {",
							"                    console.log('Service is down. Retrying in ' + retryDelay + 'ms');",
							"                } else {",
							"                    console.log('Service is not yet ready. Retrying in ' + retryDelay + 'ms');",
							"                }",
							"                // If not ready, retry this function after retryDelay",
							"                setTimeout(function() {",
							"                    isServiceReady(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log('Retry limit reached, giving up.');",
							"                postman.setNextRequest(null);",
							"            }",
							"        }",
							"    });",
							"}",
							"",
							"isServiceReady(1);",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}/healthz/liveness",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"healthz",
						"liveness"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. ping",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "05e1b371-5e07-4db4-bb76-4360f0dfe373",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 100ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(100);",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a4f4f830-9298-4f59-8589-d78356983e3b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}/healthz/ping",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"healthz",
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "4. actuator",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4d0237f8-103b-4e63-a40b-895207e9fab0",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 250ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(250);",
							"});",
							"",
							"pm.test(\"Content contains non-empty list of links\", function () {",
							"    pm.expect(pm.response.json()).to.have.a.property('links');",
							"    pm.expect(pm.response.json().links).to.be.an('array').that.is.not.empty;",
							"    pm.expect(pm.response.json().links[0]).to.have.all.keys('rel', 'href');",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "016ea92b-f6d0-4b28-a521-6dd315014982",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}/actuator",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"actuator"
					]
				}
			},
			"response": []
		},
		{
			"name": "5. prometheus",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "83efc015-35c3-4502-abac-82b6d265b389",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Content is text\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include('text/plain');",
							"});",
							"",
							"pm.test(\"Content is sane\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"# HELP\");",
							"    pm.expect(pm.response.text()).to.include(\"# TYPE\");",
							"    pm.expect(pm.response.text()).to.include(\"process_cpu_seconds_total\");",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c1f08c07-74b3-46ef-b8db-a5bfb6944c80",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}/prometheus",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"prometheus"
					]
				}
			},
			"response": []
		},
		{
			"name": "6. get all contacts",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6af2babc-c09a-4564-b7b5-02ae7bf40b96",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});",
							"",
							"postman.setEnvironmentVariable(\"initial_collection_size\", pm.response.json().length);",
							"",
							"console.log(\"Initial collection size: \" + pm.response.json().length);",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}/v3/starter/groovy/contacts",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"v3",
						"starter",
						"groovy",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "7. create a contact",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3e2612d6-15ff-489e-a22b-09dbe66a3531",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response time is less than 300ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"pm.test(\"Response contains a single result\", function () {",
							"    pm.expect(pm.response.json()).to.not.be.a('array');",
							"});",
							"",
							"pm.test(\"Returned contact matches request\", function () {",
							"    var orig = JSON.parse(postman.getEnvironmentVariable(\"create_contact_info\"));",
							"    var resp = pm.response.json();",
							"    pm.expect(resp.firstName).to.equal(orig.firstName);",
							"    pm.expect(resp.lastName).to.equal(orig.lastName);",
							"    pm.expect(resp.companyName).to.equal(orig.companyName);",
							"    pm.expect(resp.address).to.equal(orig.address);",
							"    pm.expect(resp.city).to.equal(orig.city);",
							"    pm.expect(resp.county).to.equal(orig.county);",
							"    pm.expect(resp.state).to.equal(orig.state);",
							"    pm.expect(resp.zip).to.equal(orig.zip);",
							"    pm.expect(resp.phone1).to.equal(orig.phone1);",
							"    pm.expect(resp.phone2).to.equal(orig.phone2);",
							"    pm.expect(resp.email).to.equal(orig.email);",
							"    pm.expect(resp.website).to.equal(orig.website);",
							"});",
							"",
							"",
							"postman.setEnvironmentVariable(\"created_contact_id\", pm.response.json().id);",
							"",
							"console.log(\"Created contact: \" + pm.response.json().id);"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "27f77df6-4620-491f-94ff-f1228d00dcaf",
						"type": "text/javascript",
						"exec": [
							"postman.setEnvironmentVariable(\"create_contact_info\", ",
							"`{",
							"    \"firstName\": \"Leroy\",",
							"    \"lastName\": \"Jenkins\",",
							"    \"companyName\": \"Docker Publishing Company\",",
							"    \"address\": \"1 Solutions Parkway\",",
							"    \"city\": \"Town & Country\",",
							"    \"county\": \"Chesterfield\",",
							"    \"state\": \"MO\",",
							"    \"zip\": \"63011\",",
							"    \"phone1\": \"855-226-0709\",",
							"    \"phone2\": \"888-638-6771\",",
							"    \"email\": \"leroy.jenkins@makara.io\",",
							"    \"website\": \"http://www.makara.io\"",
							"}`);",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{create_contact_info}}"
				},
				"url": {
					"raw": "http://{{host}}/v3/starter/groovy/contacts",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"v3",
						"starter",
						"groovy",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "8. get the created contact",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "584ccbd9-612f-4d61-b6b9-785e64056aa8",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Created contact matches request\", function () {",
							"    var orig = JSON.parse(postman.getEnvironmentVariable(\"create_contact_info\"));",
							"    var resp = pm.response.json();",
							"    pm.expect(resp.firstName).to.equal(orig.firstName);",
							"    pm.expect(resp.lastName).to.equal(orig.lastName);",
							"    pm.expect(resp.companyName).to.equal(orig.companyName);",
							"    pm.expect(resp.address).to.equal(orig.address);",
							"    pm.expect(resp.city).to.equal(orig.city);",
							"    pm.expect(resp.county).to.equal(orig.county);",
							"    pm.expect(resp.state).to.equal(orig.state);",
							"    pm.expect(resp.zip).to.equal(orig.zip);",
							"    pm.expect(resp.phone1).to.equal(orig.phone1);",
							"    pm.expect(resp.phone2).to.equal(orig.phone2);",
							"    pm.expect(resp.email).to.equal(orig.email);",
							"    pm.expect(resp.website).to.equal(orig.website);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Leroy\",\n    \"lastName\": \"Jenkins\",\n    \"companyName\": \"Docker Publishing Company\",\n    \"address\": \"1 Solutions Parkway\",\n    \"city\": \"Town & Country\",\n    \"county\": \"Chesterfield\",\n    \"state\": \"MO\",\n    \"zip\": \"63011\",\n    \"phone1\": \"855-226-0709\",\n    \"phone2\": \"888-638-6771\",\n    \"email\": \"leroy.jenkins@makara.io\",\n    \"website\": \"http://www.makara.io\"\n}\n"
				},
				"url": {
					"raw": "http://{{host}}/v3/starter/groovy/contacts/{{created_contact_id}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"v3",
						"starter",
						"groovy",
						"contacts",
						"{{created_contact_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "9. update the created contact",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d78c70ca-fd86-4c73-9485-b345a92b12d0",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Contact patch applied correctly\", function () {",
							"    var orig = JSON.parse(postman.getEnvironmentVariable(\"create_contact_info\"));",
							"    var patch = JSON.parse(postman.getEnvironmentVariable(\"update_contact_info\"));",
							"    var resp = pm.response.json();",
							"    pm.expect(resp.firstName).to.equal(patch.firstName);",
							"    pm.expect(resp.lastName).to.equal(orig.lastName);",
							"    pm.expect(resp.companyName).to.equal(patch.companyName);",
							"    pm.expect(resp.address).to.equal(orig.address);",
							"    pm.expect(resp.city).to.equal(orig.city);",
							"    pm.expect(resp.county).to.equal(orig.county);",
							"    pm.expect(resp.state).to.equal(orig.state);",
							"    pm.expect(resp.zip).to.equal(orig.zip);",
							"    pm.expect(resp.phone1).to.equal(orig.phone1);",
							"    pm.expect(resp.phone2).to.equal(orig.phone2);",
							"    pm.expect(resp.email).to.equal(patch.email);",
							"    pm.expect(resp.website).to.equal(orig.website);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "cb2bd17a-bbc9-472e-8b83-ff02662285d8",
						"type": "text/javascript",
						"exec": [
							"postman.setEnvironmentVariable(\"update_contact_info\", ",
							"`{",
							"    \"firstName\": \"Lester\",",
							"    \"companyName\": \"Docker Composing Company\",",
							"    \"email\": \"lester.jenkins@makara.io\"",
							"}`);",
							""
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{update_contact_info}}"
				},
				"url": {
					"raw": "http://{{host}}/v3/starter/groovy/contacts/{{created_contact_id}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"v3",
						"starter",
						"groovy",
						"contacts",
						"{{created_contact_id}}"
					]
				},
				"description": "Modify a couple of contact attributes"
			},
			"response": []
		},
		{
			"name": "10. replace the created contact",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "71cf45cf-61df-4278-af06-bf703cf466f3",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Replaced contact matches request\", function () {",
							"    var orig = JSON.parse(postman.getEnvironmentVariable(\"replace_contact_info\"));",
							"    var resp = pm.response.json();",
							"    pm.expect(resp.firstName).to.equal(orig.firstName);",
							"    pm.expect(resp.lastName).to.equal(orig.lastName);",
							"    pm.expect(resp.companyName).to.equal(orig.companyName);",
							"    pm.expect(resp.address).to.equal(orig.address);",
							"    pm.expect(resp.city).to.equal(orig.city);",
							"    pm.expect(resp.county).to.equal(orig.county);",
							"    pm.expect(resp.state).to.equal(orig.state);",
							"    pm.expect(resp.zip).to.equal(orig.zip);",
							"    pm.expect(resp.phone1).to.equal(orig.phone1);",
							"    pm.expect(resp.phone2).to.equal(orig.phone2);",
							"    pm.expect(resp.email).to.equal(orig.email);",
							"    pm.expect(resp.website).to.equal(orig.website);",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6e3d9293-5e0c-4f4b-ac20-5060166a35ed",
						"type": "text/javascript",
						"exec": [
							"postman.setEnvironmentVariable(\"replace_contact_info\", ",
							"`{",
							"    \"firstName\": \"Buster\",",
							"    \"lastName\": \"Hamilton\",",
							"    \"companyName\": \"CoreOS Rocket Manufacturing\",",
							"    \"address\": \"101 New Montgomery\",",
							"    \"city\": \"San Francisco\",",
							"    \"county\": \"Los Angeles\",",
							"    \"state\": \"CA\",",
							"    \"zip\": \"94105\",",
							"    \"phone1\": \"(800) 774-3507\",",
							"    \"phone2\": \"(800) 774-3508\",",
							"    \"email\": \"bhamilton@coreos.com\",",
							"    \"website\": \"https://coreos.com\"",
							"}`);",
							""
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{replace_contact_info}}"
				},
				"url": {
					"raw": "http://{{host}}/v3/starter/groovy/contacts/{{created_contact_id}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"v3",
						"starter",
						"groovy",
						"contacts",
						"{{created_contact_id}}"
					]
				},
				"description": "Replace an existing contact with new data"
			},
			"response": []
		},
		{
			"name": "11. delete the created contact",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0006a1bf-07c1-44ed-bc26-612160c858e2",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}/v3/starter/groovy/contacts/{{created_contact_id}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"v3",
						"starter",
						"groovy",
						"contacts",
						"{{created_contact_id}}"
					]
				},
				"description": "Delete our created contact"
			},
			"response": []
		},
		{
			"name": "12. get the deleted contact",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "69ed5a59-1fb4-4c83-99e5-c11b9a19e05e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Contact is not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response is an errors list\", function () {",
							"    pm.expect(pm.response.json().errors).to.be.a('array');",
							"});",
							"",
							"pm.test(\"Response identifies contact by id\", function() {",
							"    var contactId = postman.getEnvironmentVariable(\"created_contact_id\");",
							"    pm.expect(pm.response.text()).to.include(contactId);",
							"});",
							"",
							"pm.test(\"Response error object is valid json:api\", function() {",
							"    var data = pm.response.json().errors[0];",
							"    pm.expect(data.title).to.equal(\"Not Found\");",
							"    pm.expect(data.detail).to.include(\"There is no item\");",
							"    pm.expect(data.status).to.equal(\"404\");",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Leroy\",\n    \"lastName\": \"Jenkins\",\n    \"companyName\": \"Docker Publishing Company\",\n    \"address\": \"1 Solutions Parkway\",\n    \"city\": \"Town & Country\",\n    \"county\": \"Chesterfield\",\n    \"state\": \"MO\",\n    \"zip\": \"63011\",\n    \"phone1\": \"855-226-0709\",\n    \"phone2\": \"888-638-6771\",\n    \"email\": \"leroy.jenkins@makara.io\",\n    \"website\": \"http://www.makara.io\"\n}\n"
				},
				"url": {
					"raw": "http://{{host}}/v3/starter/groovy/contacts/{{created_contact_id}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"v3",
						"starter",
						"groovy",
						"contacts",
						"{{created_contact_id}}"
					]
				},
				"description": "Get the deleted contact to ensure it has been deleted"
			},
			"response": []
		},
		{
			"name": "13. get all contacts",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c4442087-40c1-452b-82a1-5f12b23ef858",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});",
							"",
							"pm.test(\"Contacts collection returned to initial size after delete\", function () {",
							"    var initialSize = +(postman.getEnvironmentVariable(\"initial_collection_size\"));",
							"    pm.expect(pm.response.json().length).to.equal(initialSize);",
							"});",
							"",
							"console.log(\"Cleaning up environment for next run\");",
							"postman.clearEnvironmentVariable(\"create_contact_info\");",
							"postman.clearEnvironmentVariable(\"created_contact_id\");",
							"postman.clearEnvironmentVariable(\"replace_contact_info\");",
							"postman.clearEnvironmentVariable(\"update_contact_info\");",
							"postman.clearEnvironmentVariable(\"initial_collection_size\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}/v3/starter/groovy/contacts",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"v3",
						"starter",
						"groovy",
						"contacts"
					]
				}
			},
			"response": []
		}
	]
}